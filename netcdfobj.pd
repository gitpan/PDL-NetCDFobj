pp_addpm({At => Top}, <<'EOD');
=head1 NAME 

PDL::NetCDFobj - Object-oriented interface between NetCDF files and PDL objects.

Perl extension to allow interface to NetCDF portable
binary gridded files via PDL objects.

=head1 SYNOPSIS

use PDL;
use PDL::NetCDFobj;

my $ncobj = PDL::NetCDFobj->new ("test.nc");  # New file
my $pdl = pdl [[1, 2, 3], [4, 5, 6]];

# Specify variable name to put PDL in, plus names of the dimensions.  Dimension         
# lengths are taken from the PDL, in this case, dim1 = 2 and dim2 = 3.      
$ncobj->put ('var1', ['dim1', 'dim2'], $pdl);                                               

# $pdlout = [[1, 2, 3], [4, 5, 6]]
my $pdlout = $ncobj->get ('var1');

# $dim1size = 2
my $dim1size = $ncobj->dimsize('dim1');

# A slice of the netCDF variable.
# [0,0] is the starting point, [1,2] is the count.
# $slice = [1,2]
my $slice  = $ncobj->get ('var1', pdl([0,0]), pdl([1,2]));

# Attach a double attribute of size 3 to var1
$ncobj->putatt (double([1,2,3]), 'double_attribute', 'var1');

# $attr1 = [1,2,3]
my $attr1 = $ncobj->getatt ('double_attribute', 'var1');

# Write a textual, global attribute.  'attr_name' is the attribute name.
$ncobj->putatt ('The text of the global attribute', 'attr_name');          

# $attr2 = 'The text of the global attribute'
my $attr2 = $ncobj->getatt ('attr_name');

# Close the netCDF file.  The file is also automatically closed in a DESTROY block
# when it passes out of scope.  This just makes is explicit.
$ncobj->close;

For (much) more information on NetCDF, see 

http://www.unidata.ucar.edu/packages/netcdf/index.html 

Also see the test file, test.pl in this distribution for some working examples.

=head1 DESCRIPTION

This is the PDL interface to the Unidata NetCDF library.  It uses the
netCDF version 3 library to make a subset of netCDF functionality
available to PDL users in a clean, object-oriented interface.

Another NetCDF perl interface, which allows access to the entire range
of netCDF functionality (but in a rather C-ish non-object-oriented
style) is available through Unidata at
http://www.unidata.ucar.edu/packages/netcdf/index.html).

The NetCDF standard allows N-dimensional binary data to be efficiently
stored, annotated and exchanged between many platforms.

When one creates a new netCDF object, this object is associated with one
netCDF file.  

=head1 FUNCTIONS

=head2 new

=for ref

Create an object representing a netCDF file.

=for usage      	

Arguments:  
1) The name of the file.

If this file exists and you want to write to it, 
prepend the name with the '>' character:  ">name.nc"

Returns:  The netCDF object.  Barfs if there is an error.

=for example
$ncobj = PDL::NetCDFobj->new ("file.nc");

=head2 put        

=for ref

Put a PDL matrix to a netCDF variable.

=for usage

Arguments:  
1) The name of the variable to create
2) A reference to a list of dimension names for this variable
3) The PDL to put.  It must have the same number of dimensions
   as specified in the dimension name list.

Returns:
None.

=for example

my $pdl = pdl [[1, 2, 3], [4, 5, 6]];

# Specify variable name to put PDL in, plus names of the dimensions.  Dimension         
# lengths are taken from the PDL, in this case, dim1 = 2 and dim2 = 3.      
$ncobj->put ('var1', ['dim1', 'dim2'], $pdl);                                               

=head2 get

=for ref

Get a PDL matrix from a netCDF variable.

=for usage

Arguments:  
1) The name of the netCDF variable to fetch.  If this is the only
argument, then the entire variable will be returned.

To fetch a slice of the netCDF variable, optional 2nd and 3rd argments
must be specified:
2) A pdl which specifies the N dimensional starting point of the slice.
3) A pdl which specifies the N dimensional count of the slice.

Returns:
The PDL representing the netCDF variable.  Barfs on error.

=for example

# A slice of the netCDF variable.
# [0,0] is the starting point, [1,2] is the count.
my $slice  = $ncobj->get ('var1', pdl([0,0]), pdl([1,2]));

# If var1 contains this:  [[1, 2, 3], [4, 5, 6]]
# Then $slice contains: [1,2] (Size '1' dimensions are eliminated).

=head2 putatt

=for ref

putatt -- Attach a numerical or textual attribute to a NetCDF variable or the entire file.

=for usage

Arguments:

1) The attribute.  Either:  A one dimensional PDL (perhaps contining only one number) or
a string.
2) The name to give the attribute in the netCDF file.  Many attribute names
have pre-defined meanings.  See the netCDF documentation for more details.
3) Optionally, you may specify the name of the pre-defined netCDF variable to associate
this attribute with.  If this is left off, the attribute is a global one, pertaining to
the entire netCDF file.

Returns:
Nothing.  Barfs on error.

=for example

# Attach a double attribute of size 3 to var1
$ncobj->putatt (double([1,2,3]), 'double_attribute', 'var1');

# Write a textual, global attribute.  'attr_name' is the attribute name.
$ncobj->putatt ('The text of the global attribute', 'attr_name');          

=head2 getatt

=for ref

Get an attribute from a netCDF object.

=for usage

Arguments:
1) The name of the attribute (a text string).
2) The name of the variable this attribute is attached to.  If this
argument is not specified, this function returns a global attribute of
the input name.

=for example

# Get a global attribute
my $attr2 = $ncobj->getatt ('attr_name');

# Get an attribute associated with the varibale 'var1'
my $attr1 = $ncobj->getatt ('double_attribute', 'var1');

=head2 dimsize

=for ref

Get the size of a dimension from a netCDF object.

=for usage

Arguments:
1) The name of the dimension.

Returns:
The size of the dimension.

=for example

my $dim1size = $ncobj->dimsize('dim1');

=head2 close

=for ref

Close a NetCDF object, writing out the file.

=for usage

Arguments:
None

Returns:
Nothing

This closing of the netCDF file can be done explicitly though the
'close' method.  Alternatively, a DESTROY block does an automatic
close whenever the netCDF object passes out of scope.

=for example

$ncobj->close();

=head1 AUTHOR

Doug Hunt, dhunt\@ucar.edu.

=head1 SEE ALSO

perl(1), PDL(1), netcdf(3).

=cut
EOD

# Necessary includes for .xs file
pp_addhdr(<<'EOH');
#include <netcdf.h>
#define PDLchar pdl
#define PDLshort pdl
#define PDLint pdl
#define PDLlong pdl
#define PDLfloat pdl
#define PDLdouble pdl
#define PDLsize_t pdl
EOH

pp_bless ("PDL::NetCDFobj");

$VERSION = '0.01';

# Read in a modified netcdf.h file.  Define
# a low-level perl interface to netCDF from these definitions.
sub create_low_level {

# This file must be modified to only include 
# netCDF 3 function definitions.
# Also, all C function declarations must be on one line.
  my $defn = shift;
  my @lines = split (/\n/, $defn);

  foreach (@lines) {

    next if (/^\#/);  # Skip commented out lines
    next if (/^\s*$/); # Skip blank lines

    my ($return_type, $func_name, $parms) = /^(\w+\**)\s+(\w+)\((.+)\)\;/;
    my @parms = split (/,/, $parms);

    my @vars  = ();
    my @types = ();
    my %output = ();
    foreach $parm (@parms) {

      my ($varname) = ($parm =~ /(\w+)$/);
      $parm =~ s/$varname//; # parm now contains the full C type
      $output{$varname} = 1 if (($parm =~ /\*/) && ($parm !~ /const/));
      $parm =~ s/const //;  # get rid of 'const' in C type
      $parm =~ s/^\s+//;
      $parm =~ s/\s+$//;    # pare off the variable type from 'parm'
      
      push (@vars, $varname);
      push (@types, $parm);

    }

    my $xsout = '';
    $xsout .= "$return_type\n";
    $xsout .= "$func_name (" . join (", ", @vars) . ")\n";
    for (my $i=0;$i<@vars;$i++) {
      $xsout .= "\t$types[$i]\t$vars[$i]\n";
    }
    
    $xsout .= "CODE:\n";
    $xsout .= "\tRETVAL = $func_name (";
    for (my $i=0;$i<@vars;$i++) {
      if ($types[$i] =~ /PDL/) {
	($type = $types[$i]) =~ s/PDL//;
	$xsout .= "($type)$vars[$i]"."->data,";
      } else {
	$xsout .= "$vars[$i],";
      }
    }
    chop ($xsout);  # remove last comma
    $xsout .= ");\n";
    $xsout .= "OUTPUT:\n";
    $xsout .= "\tRETVAL\n";
    foreach $var (keys %output) {
      $xsout .= "\t$var\n";
    }
    $xsout .= "\n\n";

    pp_addxs ('', $xsout);

  }

}


#-------------------------------------------------------------------------
# Create low level interface from edited netcdf header file.
#-------------------------------------------------------------------------

create_low_level (<<'EODEF');
int nc_create(const char *path, int cmode, int *ncidp);
int nc_open(const char *path, int mode, int *ncidp);
int nc_set_fill(int ncid, int fillmode, int *old_modep);
int nc_redef(int ncid);
int nc_enddef(int ncid);
int nc_sync(int ncid);
int nc_abort(int ncid);
int nc_close(int ncid);
int nc_inq(int ncid, int *ndimsp, int *nvarsp, int *nattsp, int *unlimdimidp);
int nc_inq_ndims(int ncid, int *ndimsp);
int nc_inq_nvars(int ncid, int *nvarsp);
int nc_inq_natts(int ncid, int *nattsp);
int nc_inq_unlimdim(int ncid, int *unlimdimidp);

# /* Begin _dim */

int nc_def_dim(int ncid, const char *name, size_t len, int *idp);
int nc_inq_dimid(int ncid, const char *name, int *idp);
int nc_inq_dim(int ncid, int dimid, char *name, size_t *lenp);
int nc_inq_dimname(int ncid, int dimid, char *name);
int nc_inq_dimlen(int ncid, int dimid, size_t *lenp);
int nc_rename_dim(int ncid, int dimid, const char *name);

# /* End _dim */
# /* Begin _att */

int nc_inq_att(int ncid, int varid, const char *name, nc_type *xtypep, size_t *lenp);
int nc_inq_attid(int ncid, int varid, const char *name, int *idp);
int nc_inq_atttype(int ncid, int varid, const char *name, nc_type *xtypep);
int nc_inq_attlen(int ncid, int varid, const char *name, size_t *lenp);
int nc_inq_attname(int ncid, int varid, int attnum, char *name);
int nc_copy_att(int ncid_in, int varid_in, const char *name, int ncid_out, int varid_out);
int nc_rename_att(int ncid, int varid, const char *name, const char *newname);
int nc_del_att(int ncid, int varid, const char *name);

# /* End _att */
# /* Begin {put,get}_att */

int nc_put_att_text(int ncid, int varid, const char *name, size_t len, const char *op);
int nc_get_att_text(int ncid, int varid, const char *name, char *ip);
int nc_put_att_uchar(int ncid, int varid, const char *name, nc_type xtype, size_t len, const PDLchar *op);
int nc_get_att_uchar(int ncid, int varid, const char *name, PDLchar *ip);
int nc_put_att_schar(int ncid, int varid, const char *name, nc_type xtype, size_t len, const PDLchar *op);
int nc_get_att_schar(int ncid, int varid, const char *name, PDLchar *ip);
int nc_put_att_short(int ncid, int varid, const char *name, nc_type xtype, size_t len, const PDLshort *op);
int nc_get_att_short(int ncid, int varid, const char *name, PDLshort *ip);
int nc_put_att_int(int ncid, int varid, const char *name, nc_type xtype, size_t len, const PDLint *op);
int nc_get_att_int(int ncid, int varid, const char *name, PDLint *ip);
int nc_put_att_long(int ncid, int varid, const char *name, nc_type xtype, size_t len, const PDLlong *op);
int nc_get_att_long(int ncid, int varid, const char *name, PDLlong *ip);
int nc_put_att_float(int ncid, int varid, const char *name, nc_type xtype, size_t len, const PDLfloat *op);
int nc_get_att_float(int ncid, int varid, const char *name, PDLfloat *ip);
int nc_put_att_double(int ncid, int varid, const char *name, nc_type xtype, size_t len, const PDLdouble *op);
int nc_get_att_double(int ncid, int varid, const char *name, PDLdouble *ip);

# /* End {put,get}_att */
# /* Begin _var */

int nc_def_var(int ncid, const char *name,  nc_type xtype, int ndims, PDLint *dimidsp, int *varidp);
int nc_inq_var(int ncid, int varid, char *name, nc_type *xtypep, int *ndimsp, PDLint *dimidsp, int *nattsp);
int nc_inq_varid(int ncid, const char *name, int *varidp);
int nc_inq_varname(int ncid, int varid, char *name);
int nc_inq_vartype(int ncid, int varid, nc_type *xtypep);
int nc_inq_varndims(int ncid, int varid, int *ndimsp);
int nc_inq_vardimid(int ncid, int varid, PDLint *dimidsp);
int nc_inq_varnatts(int ncid, int varid, int *nattsp);
int nc_rename_var(int ncid, int varid, const char *name);
int nc_copy_var(int ncid_in, int varid, int ncid_out);

# /* End _var */
# /* Begin {put,get}_vara */

int nc_put_vara_text(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLchar *op);
int nc_get_vara_text(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLchar *ip);
int nc_put_vara_uchar(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLchar *op);
int nc_get_vara_uchar(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLchar *ip);
int nc_put_vara_schar(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLchar *op);
int nc_get_vara_schar(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLchar *ip);
int nc_put_vara_short(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLshort *op);
int nc_get_vara_short(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLshort *ip);
int nc_put_vara_int(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLint *op);
int nc_get_vara_int(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLint *ip);
int nc_put_vara_long(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLlong *op);
int nc_get_vara_long(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLlong *ip);
int nc_put_vara_float(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLfloat *op);
int nc_get_vara_float(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLfloat *ip);
int nc_put_vara_double(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLdouble *op);
int nc_get_vara_double(int ncid, int varid, PDLsize_t *startp, PDLsize_t *countp, PDLdouble *ip);

# /* End {put,get}_vara */
# /* Begin {put,get}_var */

int nc_put_var_text(int ncid, int varid, const char *op);
int nc_get_var_text(int ncid, int varid, char *ip);
int nc_put_var_uchar(int ncid, int varid, const PDLchar *op);
int nc_get_var_uchar(int ncid, int varid, PDLchar *ip);
int nc_put_var_schar(int ncid, int varid, const PDLchar *op);
int nc_get_var_schar(int ncid, int varid, PDLchar *ip);
int nc_put_var_short(int ncid, int varid, const PDLshort *op);
int nc_get_var_short(int ncid, int varid, PDLshort *ip);
int nc_put_var_int(int ncid, int varid, const PDLint *op);
int nc_get_var_int(int ncid, int varid, PDLint *ip);
int nc_put_var_long(int ncid, int varid, const PDLlong *op);
int nc_get_var_long(int ncid, int varid, PDLlong *ip);
int nc_put_var_float(int ncid, int varid, const PDLfloat *op);
int nc_get_var_float(int ncid, int varid, PDLfloat *ip);
int nc_put_var_double(int ncid, int varid, const PDLdouble *op);
int nc_get_var_double(int ncid, int varid, PDLdouble *ip);

# /* End {put,get}_var */

EODEF

#-------------------------------------------------------------------------
# Perl portion of the interface (put by PP into the .pm file)
#-------------------------------------------------------------------------

pp_addpm (<<'EOPM');

# Used for creating new blank pdls with the input number of dimensions, and
# the correct type.
my %typemap = (
	       NC_BYTE()   => sub { PDL->zeroes (PDL::byte,   @_); },
	       NC_CHAR()   => sub { PDL->zeroes (PDL::byte,   @_); },
	       NC_SHORT()  => sub { PDL->zeroes (PDL::short,  @_); },
	       NC_LONG()   => sub { PDL->zeroes (PDL::long,   @_); },
	       NC_FLOAT()  => sub { PDL->zeroes (PDL::float,  @_); },
	       NC_DOUBLE() => sub { PDL->zeroes (PDL::double, @_); },
	       );

# Used for creating new pdls with the input data, and
# the correct type.
my %typemap1 = (
		NC_BYTE()   => sub { PDL::byte  (@_); },
		NC_CHAR()   => sub { PDL::byte  (@_); },
		NC_SHORT()  => sub { PDL::short (@_); },
		NC_LONG()   => sub { PDL::long  (@_); },
		NC_FLOAT()  => sub { PDL::float (@_); },
		NC_DOUBLE() => sub { PDL::double(@_); },
		);

# Used for creating new blank pdls with the input number of dimensions, and
# the correct type.
my %typemap2 = (
		PDL::byte->[0]   => sub { return PDL::NetCDFobj::nc_put_var_uchar  (@_); },
		PDL::short->[0]  => sub { return PDL::NetCDFobj::nc_put_var_short  (@_); },
		PDL::long->[0]   => sub { return PDL::NetCDFobj::nc_put_var_int    (@_); },
		PDL::float->[0]  => sub { return PDL::NetCDFobj::nc_put_var_float  (@_); },
		PDL::double->[0] => sub { return PDL::NetCDFobj::nc_put_var_double (@_); },
		);


# Used for mapping a PDL type to a netCDF type
my %typemap3 = (
		PDL::byte->[0]   => NC_BYTE(), 
		PDL::short->[0]  => NC_SHORT(), 
		PDL::long->[0]   => NC_INT(), 
		PDL::float->[0]  => NC_FLOAT(), 
		PDL::double->[0] => NC_DOUBLE(), 
		);

# Used for getting a netCDF variable for the correct type of a PDL
my %typemap4 = (
		PDL::byte->[0]   => sub { PDL::NetCDFobj::nc_get_var_uchar  (@_); },
		PDL::short->[0]  => sub { PDL::NetCDFobj::nc_get_var_short  (@_); },
		PDL::long->[0]   => sub { PDL::NetCDFobj::nc_get_var_int    (@_); },
		PDL::float->[0]  => sub { PDL::NetCDFobj::nc_get_var_float  (@_); },
		PDL::double->[0] => sub { PDL::NetCDFobj::nc_get_var_double (@_); },
		);

# Used for putting attributes of correct type for a PDL
my %typemap5 = (
		PDL::byte->[0]   => sub { return PDL::NetCDFobj::nc_put_att_uchar  (@_); },
		PDL::short->[0]  => sub { return PDL::NetCDFobj::nc_put_att_short  (@_); },
		PDL::long->[0]   => sub { return PDL::NetCDFobj::nc_put_att_int    (@_); },
		PDL::float->[0]  => sub { return PDL::NetCDFobj::nc_put_att_float  (@_); },
		PDL::double->[0] => sub { return PDL::NetCDFobj::nc_put_att_double (@_); },
		);

# Used for getting a netCDF attribute for the correct type of a PDL
my %typemap6 = (
		PDL::byte->[0]   => sub { PDL::NetCDFobj::nc_get_att_uchar  (@_); },
		PDL::short->[0]  => sub { PDL::NetCDFobj::nc_get_att_short  (@_); },
		PDL::long->[0]   => sub { PDL::NetCDFobj::nc_get_att_int    (@_); },
		PDL::float->[0]  => sub { PDL::NetCDFobj::nc_get_att_float  (@_); },
		PDL::double->[0] => sub { PDL::NetCDFobj::nc_get_att_double (@_); },
		);

# Used for getting a slice of a netCDF variable for the correct type of a PDL 
my %typemap7 = (
		PDL::byte->[0]   => sub { PDL::NetCDFobj::nc_get_vara_uchar  (@_); },
		PDL::short->[0]  => sub { PDL::NetCDFobj::nc_get_vara_short  (@_); },
		PDL::long->[0]   => sub { PDL::NetCDFobj::nc_get_vara_int    (@_); },
		PDL::float->[0]  => sub { PDL::NetCDFobj::nc_get_vara_float  (@_); },
		PDL::double->[0] => sub { PDL::NetCDFobj::nc_get_vara_double (@_); },
		);

# This routine hooks up an object to a NetCDF file.
sub new {
  my $type = shift;
  my $file = shift;

  my $self = {};
  my $rc;
  my $write;

  if (substr($file, 0, 1) eq '>') { # open for writing
    $file = substr ($file, 1);      # chop off >
    $write = 1;
  }
    
  if (-e $file) {

    if ($write) {

      $rc = PDL::NetCDFobj::nc_open ($file, NC_WRITE(), $self->{NCID}=-999);
      barf ("new:  Cannot open file -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;
      $self->{WR} = 'w';

    } else { # Open read-only

      $rc = PDL::NetCDFobj::nc_open ($file, 0, $self->{NCID}=-999);
      barf ("new:  Cannot open file -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;
      $self->{WR} = 'r';

      # Specify that this file is out of define mode
      $self->{DEFINE} = 0;

    }

    # Find out about variables and dimensions in this file
    my ($ndims, $nvars);
    $rc = PDL::NetCDFobj::nc_inq_ndims ($self->{NCID}, $ndims=-999);
    barf ("new:  Cannot inquire ndims -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;
    $rc = PDL::NetCDFobj::nc_inq_nvars ($self->{NCID}, $nvars=-999);
    barf ("new:  Cannot inquire nvars -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;
    
    for (my $i=0;$i<$ndims;$i++) {
      $rc = PDL::NetCDFobj::nc_inq_dimname ($self->{NCID}, $i, 
					 my $name='x' x NC_MAX_NAME()); # Preallocate strings
      barf ("new:  Cannot inquire dim name -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;	
      $self->{DIMIDS}{$name} = $i;
      
      $rc = PDL::NetCDFobj::nc_inq_dimlen ($self->{NCID}, $i, my $len = -999);
      barf ("new:  Cannot inquire dim length -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;	
      $self->{DIMLENS}{$name} = $len;
    }
    
    for (my $i=0;$i<$nvars;$i++) {
      $rc = PDL::NetCDFobj::nc_inq_varname ($self->{NCID}, $i, 
					 my $name='x' x NC_MAX_NAME()); # Preallocate strings
      barf ("new:  Cannot inquire var name -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;	
      $self->{VARIDS}{$name} = $i;
      
    }
    
    # Specify that this file is out of define mode
    $self->{DEFINE} = 0;
    
  } else { # new file
    
    $rc = PDL::NetCDFobj::nc_create ($file, NC_CLOBBER, $self->{NCID}=-999);
    barf ("new:  Cannot create netCDF file -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;	
    
    # Specify that this file is now in define mode
    $self->{DEFINE} = 1;

    # Open for writing
    $self->{WR} = 'w';

  }
  
  # Record file name
  $self->{FILENM} = $file;

  bless $self, $type;
}

# Explicitly close a netCDF file and free the object
sub close {
  my $self = shift;
  return PDL::NetCDFobj::nc_close ($self->{NCID});
}

# Close a netCDF object when it passes out of scope
sub DESTROY {
  my $self = shift;
  # print "Destroying $self\n";
  $self->close;
}
   
# Put a netCDF variable from a PDL
sub put {
  my $self  = shift;  # name of object
  my $varnm = shift;  # name of netCDF variable to create or update
  my $dims  = shift;  # set of dimensions, i.e. ['dim1', 'dim2']
  my $pdl   = shift;  # PDL to put

  barf "Cannot write read-only netCDF file $self->{FILENM}" if ($self->{WR} eq 'r');

  # Define dimensions if necessary

  my @dimlens = reverse $pdl->dims;

  my $dimids = zeroes (PDL::long, scalar(@dimlens));
  for (my $i=0;$i<@$dims;$i++) {
    if (!defined($self->{DIMIDS}{$$dims[$i]})) {

      unless ($self->{DEFINE}) {
	my $rc = PDL::NetCDFobj::nc_redef ($self->{NCID});
	barf ("Cannot put file into define mode") if $rc;
	$self->{DEFINE} = 1;
      }


      my $rc = PDL::NetCDFobj::nc_def_dim ($self->{NCID}, $$dims[$i], $dimlens[$i], 
				$self->{DIMIDS}{$$dims[$i]}=-999);
      barf ("put:  Cannot define dimension -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;

      $self->{DIMLENS}{$$dims[$i]} = $dimlens[$i];

    }
    set ($dimids, $i, $self->{DIMIDS}{$$dims[$i]});

    barf ("put:  Attempt to redefine length of dimension $$dims[$i]") 
      if ($self->{DIMLENS}{$$dims[$i]} != $dimlens[$i]);
    
  }

  # Define variable if necessary
  if (!defined($self->{VARIDS}{$varnm})) {
  
    unless ($self->{DEFINE}) {
      my $rc = PDL::NetCDFobj::nc_redef ($self->{NCID});
      barf ("put:  Cannot put file into define mode -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;
      $self->{DEFINE} = 1;
    }

    my $rc = PDL::NetCDFobj::nc_def_var ($self->{NCID}, $varnm, $typemap3{$pdl->get_datatype}, 
			   scalar(@dimlens), $dimids, $self->{VARIDS}{$varnm}=-999);
    barf ("put:  Cannot define variable -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
  }

  # Make PDL physical
  $pdl->make_physical;

  # Get out of define mode
  if ($self->{DEFINE}) {
    my $rc = PDL::NetCDFobj::nc_enddef ($self->{NCID});
    barf ("put:  Cannot end define mode -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
    $self->{DEFINE} = 0;
  }

  # Call the correct 'put' routine depending on PDL type
  $rc = &{$typemap2{$pdl->get_datatype}}($self->{NCID}, $self->{VARIDS}{$varnm}, $pdl);
  barf ("put:  Cannot write file -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
  
  $rc = PDL::NetCDFobj::nc_sync($self->{NCID});
  barf ("put:  Cannot sync file -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    

  return 0;

}

# Get a variable into a pdl
sub get {
  my $self  = shift;
  my $varnm = shift;

  # Optional variables
  my $start = shift;  # PDL containing start of hyperslab to get
  my $count = shift;  # PDL containing count along each dimension

  barf ("Cannot find variable $varnm") if (!defined($self->{VARIDS}{$varnm}));

  # Determine the type of this variable
  my ($datatype, $ndims, $natts, $i);
  $rc  = PDL::NetCDFobj::nc_inq_vartype ($self->{NCID}, $self->{VARIDS}{$varnm}, $datatype=-999);
  $rc |= PDL::NetCDFobj::nc_inq_varndims ($self->{NCID}, $self->{VARIDS}{$varnm}, $ndims=-999);
  my $dimids = zeroes (PDL::long, $ndims);
  $rc |= PDL::NetCDFobj::nc_inq_vardimid ($self->{NCID}, $self->{VARIDS}{$varnm}, $dimids);
  barf ("get:  Cannot get info on this var id -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    

  # Find out size of each dimension of this NetCDF matrix
  my ($name, $size, @cnt);
  for ($i=0;$i<$ndims;$i++) {
    my $rc = PDL::NetCDFobj::nc_inq_dim ($self->{NCID}, $dimids->at($i), $name='x' x NC_MAX_NAME(), $size=-999);
    barf ("get:  Cannot get info on this dimension -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
    push (@cnt, $size);
  }

  my $pdl; # The PDL to return
  if (defined ($count)) {  # Get a hyperslab of the netCDF matrix

#
# These error checks commented out because profiling has shown 
# that they take LOTS of time.  The user (I think) can rely on the
# error messages given by netCDF.
# D. Hunt, 1/2/98
#
#    barf ("Wrong number of elements in count")
#      if (nelem($count) != @cnt);
#
#    my $diff = pdl (@cnt) - $count;
#    barf ("One dimension of count greater than size of netCDF matrix")
#      if (($diff < 0)->sum != 0);
#
#    barf ("Negative or zero counts not permitted")
#      if (($count <= 0)->sum != 0);
#
#    barf ("Wrong number of elements in start vector") 
#      if (nelem($start) != @cnt);
#
#    $diff = pdl (@cnt) - $start;
#    barf ("One dimension of start greater than size of netCDF matrix")
#      if (($diff < 0)->sum != 0);
#
#    barf ("Negative start values not permitted")
#      if (($start < 0)->sum != 0);
#
    my $cnt = $count->index (($count != 1)->where); # Get rid of length-one dimensions
    if (nelem($cnt) == 0) { $cnt = pdl (1); }    # If no dimensions left, add one single length one.

    $pdl = &{$typemap{$datatype}}(reverse list $cnt);	

    # Get the data
    $rc = &{$typemap7{$pdl->get_datatype}}($self->{NCID}, $self->{VARIDS}{$varnm}, 
					   $start, $count, $pdl);
    barf ("get:  Cannot get data -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    

  } else { # get whole netCDF matrix

    # Create empty PDL (of correct type and size) to hold output from NetCDF file
    $pdl = &{$typemap{$datatype}}(reverse @cnt);	

    # Get the data
    $rc = &{$typemap4{$pdl->get_datatype}}($self->{NCID}, $self->{VARIDS}{$varnm}, $pdl);
    barf ("get:  Cannot get data -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
  
  }
  
  return $pdl;
}


# Get the size of a dimension
sub dimsize {
  my $self  = shift;
  my $dimnm = shift;
  
  my ($dimsz, $name);
  my $rc = nc_inq_dimlen ($self->{NCID}, $self->{DIMIDS}{$dimnm}, $dimsz=-999);
  barf ("dimsize:  Cannot get dimension length -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
  
  return $dimsz;
}


# Put a netCDF attribute from a PDL or string
sub putatt {
  my $self  = shift;  # name of object
  my $att   = shift;  # Attribute to put.  Can be a string or a PDL
  my $attnm = shift;  # Name of attribute to put
  my $varnm = shift;  # name of netCDF variable this attribute is to be associated with
                      # (defaults to global if not passed).

  barf "Cannot write read-only netCDF file $self->{FILENM}" if ($self->{WR} eq 'r');

  # If no varnm passed in, fetch a global attribute
  if (!defined($varnm)) { 
    $varnm = 'GLOBAL';
    $self->{VARIDS}{$varnm} = NC_GLOBAL();
  } 

  # Put netCDF file into define mode
  unless ($self->{DEFINE}) {
    my $rc = PDL::NetCDFobj::nc_redef ($self->{NCID});
    barf ("putatt:  Cannot put file into define mode -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
    $self->{DEFINE} = 1;
  }

  # Attribute is a PDL one-D variable
  if (ref $att eq 'PDL') {

    barf ("Attributes can only be 1 dimensional") if ($att->dims != 1);

    # Make PDL physical
    $att->make_physical;

    # Put the attribute
    my $rc = &{$typemap5{$att->get_datatype}}($self->{NCID}, $self->{VARIDS}{$varnm}, 
					      $attnm, $typemap3{$att->get_datatype},
					      nelem ($att), $att);
    barf ("putatt:  Cannot put PDL attribute -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;  
  
  } elsif (ref $att eq '') {  # A scalar variable

    # Put the attribute
    my $rc = PDL::NetCDFobj::nc_put_att_text ($self->{NCID}, $self->{VARIDS}{$varnm}, $attnm,
			      length($att), $att);
    barf ("putatt:  Cannot put string attribute -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;  

  } else {

    barf ("Attributes of this type not supported");

  }

  # Get out of define mode
  if ($self->{DEFINE}) {
    my $rc = PDL::NetCDFobj::nc_enddef ($self->{NCID});
    barf ("put:  Cannot end define mode -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
    $self->{DEFINE} = 0;
  }

  $rc = PDL::NetCDFobj::nc_sync($self->{NCID});
  barf ("putatt:  Cannot sync file -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    

  return 0;

}


# Get an attribute value into a pdl
sub getatt {
  my $self  = shift;
  my $attnm = shift;
  my $varnm = shift;
  
  # If no varnm passed in, fetch a global attribute
  if (!defined($varnm)) { 
    $varnm = 'GLOBAL';
    $self->{VARIDS}{$varnm} = NC_GLOBAL();
  } 

  # Determine the type and length of this attribute
  $rc = PDL::NetCDFobj::nc_inq_atttype ($self->{NCID}, $self->{VARIDS}{$varnm}, $attnm, my $datatype=-999);
  barf ("getatt:  Cannot get attribute type -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;  

  $rc = PDL::NetCDFobj::nc_inq_attlen ($self->{NCID}, $self->{VARIDS}{$varnm}, $attnm, my $attlen=-999);
  barf ("getatt:  Cannot get attribute length -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;  

  # Get text attribute into perl string
  if ($datatype == NC_CHAR()) {

    $rc = PDL::NetCDFobj::nc_get_att_text ($self->{NCID}, $self->{VARIDS}{$varnm}, 
			   $attnm, my $str='x' x $attlen);
    barf ("getatt:  Cannot get text attribute -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;  

    return $str;

  } 

  # Get PDL attribute

  # Create empty PDL (of correct type and size) to hold output from NetCDF file
  my $pdl = &{$typemap{$datatype}}($attlen);	

  # Get the attribute
  $rc = &{$typemap6{$pdl->get_datatype}}($self->{NCID}, $self->{VARIDS}{$varnm}, $attnm, $pdl);
  barf ("getatt:  Cannot get attribute -- " . PDL::NetCDFobj::nc_strerror ($rc)) if $rc;    
  
  return $pdl;

}
EOPM

#-------------------------------------------------------------------------
# netCDF constants
#-------------------------------------------------------------------------

pp_addpm (<<'EOPM');

# These defines are taken from netcdf.h  I deemed this cleaner than using
# h2xs and the autoload stuff, which mixes alkwardly with PP.
sub NC_FILL_BYTE { return -127; }
sub NC_FILL_CHAR { return 0; }
sub NC_FILL_SHORT { return -32767; }
sub NC_FILL_INT { return -2147483647; }
sub NC_FILL_FLOAT { return 9.9692099683868690e+36; } # near 15 * 2^119 
sub NC_FILL_DOUBLE { return 9.9692099683868690e+36; }

sub NC_CLOBBER { return 0; }
sub NC_NOWRITE { return 0; }
sub NC_WRITE { return 0x1; } # read & write 
sub NC_NOCLOBBER { return 0x4; } # Don't destroy existing file on create 
sub NC_FILL { return 0; }	 # argument to ncsetfill to clear NC_NOFILL 
sub NC_NOFILL { return 0x100; }  # Don't fill data section an records 
sub NC_LOCK { return 0x0400; }   # Use locking if available 
sub NC_SHARE { return 0x0800; }  # Share updates, limit cacheing 
sub NC_UNLIMITED {  return 0; }
sub NC_GLOBAL { return -1; }

sub NC_MAX_DIMS { return 100; }  # max dimensions per file 
sub NC_MAX_ATTRS { return 2000; }# max global or per variable attributes 
sub NC_MAX_VARS { return 2000; } # max variables per file 
sub NC_MAX_NAME { return 128; }	 # max length of a name 
sub NC_MAX_VAR_DIMS { return NC_MAX_DIMS; } # max per variable dimensions

sub NC_NOERR { return 0; }       # No Error 
sub NC_EBADID { return -33; }    # Not a netcdf id 
sub NC_ENFILE { return -34; }    # Too many netcdfs open 
sub NC_EEXIST { return -35; }    # netcdf file exists && NC_NOCLOBBER 
sub NC_EINVAL { return -36; }    # Invalid Argument 
sub NC_EPERM  { return -37; }    # Write to read only 
sub NC_ENOTINDEFINE { return -38; } # Operation not allowed in data mode 
sub NC_EINDEFINE { return -39; } # Operation not allowed in define mode 
sub NC_EINVALCOORDS { return -40; } # Index exceeds dimension bound 
sub NC_EMAXDIMS { return -41; }  # NC_MAX_DIMS exceeded 
sub NC_ENAMEINUSE { return -42; }# String match to name in use 
sub NC_ENOTATT { return -43; }   # Attribute not found 
sub NC_EMAXATTS { return -44; }  # NC_MAX_ATTRS exceeded 
sub NC_EBADTYPE { return -45; }  # Not a netcdf data type 
sub NC_EBADDIM { return -46; }   # Invalid dimension id or name 
sub NC_EUNLIMPOS { return -47; } # NC_UNLIMITED in the wrong index 
sub NC_EMAXVARS { return -48; }	 # NC_MAX_VARS exceeded 
sub NC_ENOTVAR { return -49; }	 # Variable not found 
sub NC_EGLOBAL { return -50; }	 # Action prohibited on NC_GLOBAL varid 
sub NC_ENOTNC { return -51; }	 # Not a netcdf file 
sub NC_ESTS   { return -52; }	 # In Fortran, string too short 
sub NC_EMAXNAME { return -53; }	 # NC_MAX_NAME exceeded 
sub NC_EUNLIMIT { return -54; }	 # NC_UNLIMITED size already in use 
sub NC_ENORECVARS { return -55; }# nc_rec op when there are no record vars 
sub NC_ECHAR { return -56; }	 # Attempt to convert between text & numbers 
sub NC_EEDGE { return -57; }	 # Edge+start exceeds dimension bound 
sub NC_ESTRIDE { return -58; }	 # Illegal stride 
sub NC_EBADNAME { return -59; }	 # Attribute or variable name
sub NC_ERANGE { return -60; }	 # Math result not representable 
sub NC_ENOMEM { return -61; }	 # Memory allocation (malloc) failure 
sub NC_SYSERR { return (-31)};

sub NC_FATAL { return 1};        # quit on netcdf error
sub NC_VERBOSE { return 2};      # give verbose error messages

sub NC_BYTE { return 1; }        # signed 1 byte integer 
sub NC_CHAR { return 2; }        # ISO/ASCII character 
sub NC_SHORT { return 3; }	 # signed 2 byte integer 
sub NC_INT { return 4; }	 # signed 4 byte integer 
sub NC_FLOAT { return 5; }       # single precision floating point number 
sub NC_DOUBLE { return 6; }	 # double precision floating point number 
sub NC_LONG { return NC_INT; }
EOPM

#-------------------------------------------------------------------------
# Add the error number -> error string translation function interface
# to the .xs file.  This function behaves differently than the others
# from netcdf.h, so it is not created in 'create_low_level'
#-------------------------------------------------------------------------
pp_addxs (<<'EOXS');

SV *
nc_strerror (errid)
  	int 	errid
CODE:
	{
		const char * myerrstr;
		char errstr[NC_MAX_NAME]; /* use of this second string gets rid of a warning msg */
		myerrstr = nc_strerror (errid);
		strcpy (errstr, myerrstr);
		RETVAL = newSVpv (errstr, strlen(myerrstr));
	}
OUTPUT:
	RETVAL  

EOXS

pp_done();
